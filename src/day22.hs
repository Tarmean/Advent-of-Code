import Text.Parsec hiding (count)
import Data.List (sortOn)
import Text.Parsec.String
import Data.List.Split(chunksOf)

type Position = (Int, Int)
data Node = Node { pos :: Position, size ::  Int, used :: Int } deriving (Show, Eq, Ord)

main =  do (Right nodes) <-  parseFromFile pFormat "in22.txt"
           let nodes' = sortOn p nodes
           mapM_ putStrLn  . printAll $ nodes'
pFormat :: Parser [Node]
pFormat = do string "root@ebhq-gridcenter# df -h" >> newline
             string "Filesystem              Size  Used  Avail  Use%" >> newline
             many1 pNode
pNode :: Parser Node
pNode = do x <- string "/dev/grid/node-x" *> integer
           y <- string "-y" *> integer <* spaces
           size <- pSize
           used <- pSize
           avail <- pSize
           use <- pUse
           return Node { pos = (x, y), size = size, used = used }

printAll ls = do line <- chunksOf 31 ls
                 return $ map printS line
-- printS = show
printS Node {used=0} = '_'
printS Node {size = size} | size > 500 = '#'
printS Node {pos=(30,0)} = 'G'
printS Node {pos=(0,0)} = 'A'
printS _ = '.'
integer = read <$> many1 digit
pSize = integer <* char 'T' <* spaces
pUse = integer <* char '%' <* spaces

pairs ls = sum $ do l <- ls
                    return $ countViable l ls
countViable = count . viable

viable  n1 n2 = used n1 /= 0 && n1 /= n2 && available n2 >= used n1
available Node { size = s, used = u } = s - u 
count = length .: filter 

infixl 8 .:
(.:) = (.).(.)

p  = f . pos
 where f (x, y) = (y, x)
 
-- A---T------------------------G_
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|##########################
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|..........................
-- ....|--------_.................
-- ...............................
-- ...............................
-- ...............................
-- 9+27+26+29*5
